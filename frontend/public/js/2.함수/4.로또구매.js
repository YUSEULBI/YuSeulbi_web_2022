//console.log('js작동');

// 1. 숫자 버튼 출력하는 함수
function 버튼출력(){ // f s
	//console.log('2.함수작동') // 클릭이벤트로 함수가 작동하는지 확인
	
	let 버튼목록 = ''; //for 밖에 만든 이유 : 45개의 버튼을 저장하려고
	
	//for
	for( let i = 1 ; i<=45 ; i++ ){
		// i는 1부터 45까지 1씩 증가 반복처리
		//console.log( ' 3.' + i )
		
		버튼목록 += `<button onclick="버튼클릭(${i})" >${i}</button>` //html을 만듦
		//만약에 i가 5배수이면 줄바꿈
		if ( i % 5 == 0 ){버튼목록 += '<br/>'}
		
		
		
		// 취소 버튼 보이게 활성화
		document.querySelector('.취소버튼').style.display = 'inline'
		
		//** '로또구매하기'<button>를 클릭하면 '버튼출력'함수가 실행되는 이벤트함수
		//** '로또구매하기'<button>을 클릭하면
		//** 1. '버튼목록'을 공백으로 선언
		//** 2. i는 1부터~45까지 1씩증가 반복처리
		//** 3. 내용이 i인 '버튼클릭'함수가 들어있는<button>이 45개 만들어져 버튼목록에 추가된다.
		//** 4. i가 5의배수일때 마다 버튼목록에 줄바꿈이 추가된다. 
		//** 5. .취소버튼'로또구매취소'<button>이 사라진다.
		//** '로또구매하기'<button> 클릭하면 1부터 45개의 버튼이 만들어져 버튼목록에 추가되고.
		//** 5의배수일 때마다 줄바꿈이 버튼목록에 추가, 로또구매취소 버튼 사라짐
		
	} // for e

	//console.log('4. :' + 버튼목록 )
	//해당 div에 버튼목록 넣어줌
	document.querySelector('.버튼목록상자').innerHTML = 버튼목록
	//** html 버튼목록상자<div>에 추가된 버튼목록 내용을 옮긴다. 
	
} // f e

// 2. 로또구매취소
function 버튼출력취소(){ //'로또구매취소'를 누르면 실행되는 함수
	//해당 div에 ' ' 공백으로 변경하기
	document.querySelector('.버튼목록상자').innerHTML = ' '
	document.querySelector('.취소버튼').style.display = 'none'
	
	//배열내 모든 요소 제거
	선택번호목록.splice(0); // 0번 인덱스부터 (개수 생략시) 모두 제거
	추첨버튼출력()
	
	// '로또구매취소'버튼을 누르면 html 버튼목록상자div를 공백으로 바꾼다.
	// '로또구매취소'버튼을 누르면 '로또구매취소'버튼을 숨긴다.
	
	//** 로또구매취소<button>클릭하면 '버튼출력취소'함수가 실행된다.
	//** '버튼출력취소'함수가 실행되면 '버튼목록상자'<div>가 공백으로 덮어씌워지고 (삭제되고)
	//** .취소버튼'로또구매취소'<button>을 숨긴다.
}	

// 4. 선택한 숫자를 6개 저장하는 배열
let 선택번호목록 = [ ]
	//**'선택번호목록'이라는 배열을 비워진상태로 만든다.
	
// 3. 버튼 클릭 함수 // 
function 버튼클릭( i ){ //숫자버튼을 누르면 실행되는 함수
	// **로또구매하기를 눌러서 '버튼출력'함수로 만들어진 버튼목록<button>은 클릭시 각각 '버튼클릭'이라는 함수가 실행된다. 인수는 i
	console.log( i + "번호 를 선택했군요.") //인수가 들어왔는지 확인
	console.log ('선택번호목록의 배열: '+ 선택번호목록)
	console.log ('선택번호목록의 인덱스: '+ 선택번호목록.indexOf(i))
	// 1. 중복검사 / 선택취소
	if(선택번호목록.indexOf(i)>=0) // i의 인덱스 찾기 데이터가 없으면 -1
	{ // if s
		alert('이미 선택한 번호 입니다.')
		
		선택번호목록.splice( 선택번호목록.indexOf(i) , 1 ) //(인덱스 , 개수 )해당 인덱스부터 개수만큼삭제
		추첨버튼출력(); //함수호출 (주는거 받는거 없이 코드실행)
	
		return; // 반환값은 없지만 함수를 끝낼 수 있다. [ 코드가 더이상 아래코드로 실행되지 않는다.]
		
	//** <button onclick="버튼클릭(i)">i<button>을 클릭하면 '버튼클릭'함수가 실행된다.
	//** 1~45개의 <button>중 i를 클릭하면 '선택번호목록'에 i가 추가되고 인덱스는 0이 된다.
	//** '선택번호목록'에서 클릭한 i가 있는지 확인. 있으면 인덱스 번호를 알려주고 없으면 -1이 나온다.
	//** 0이상의 번호가 나오면 선택번호목록에 해당 i가 있는 것. 그럴경우, 'i중복일경우' 
	//** alert가 뜨고
	//** 선택번호목록에서 i를 삭제한다. (indexof(삭제할요소,1)) <-삭제할요소 삭제 
	//** 추첨버튼출력 함수가 실행된다.('선택번호목록'에 배열이 변경되었을 수 있기 때문)
	//** 추첨버튼의 활성화,비활성화,선택번호상자<div>에 현재 '선택번호목록' 덮어씌우기 
	//** 마지막으로 함수가 진행되지 않게 종료된다.
	
	} // if e
	
	// 2. 6개까지만 저장 
	if ( 선택번호목록.length == 6 ) //배열내 데이터 총 개수 // 배열내 숫자가 6개 존재하면 함수를 나감.
	{
		alert(' 이미 모두[6개]를 선택했습니다.')
		
		
		
		return;
		//** i<button>을 클릭하면 버튼클릭 함수가 실행되고
		//** 배열에 중복 i버튼이 있는지 확인 , 중복이면 삭제 , 추첨버튼 활성화여부 ,    
		//** if중복검사 통과했으면 두번째 if '선택번호목록'배열의 길이가 6이면 alert알림메시지 
		//** 그리고 함수가 진행되지 않게 종료된다.
		
	} // if e
	
	// 위 2가지 유효성 검사를 충족하지 않았을때 저장
	선택번호목록.push( i )
	추첨버튼출력(); //함수호출 (주는거 받는거 없이 코드실행)
	//** i버튼을 눌러 버튼클릭함수 실행(중복검사,6개검사) if문에서 return없이 통과되었으면
	//** 선택번호목록 배열에 선택한 i를 추가하고
	//** 추첨버튼출력 함수실행 (추첨버튼 활성화여부, 선택번호상자<div>으로 '선택번호목록'배열내용 옮기기)
}
	
//4. 선택번호목록 출력 및 추첨버튼 활성화 [1. 구매취소 , 2.버튼클릭시 숫자등록 , 3.버튼클릭시 숫자취소 ]
function 추첨버튼출력(){
	//추첨버튼 활성화 / 비활성화
	if( 선택번호목록.length == 6 ){
		document.querySelector('.추첨버튼').style.display = 'inline'		
	}else{
		document.querySelector('.추첨버튼').style.display = 'none'
	}
	document.querySelector('.선택번호상자').innerHTML = 선택번호목록
	
} //f e 
// 2. 추첨번호목록 배열 선언
let 추첨번호목록 = []
// 5. 추첨하기 버튼을 클릭했을 때 함수
function 구매추첨(){
	
	//1. 컴퓨터가 난수 발생 (1~45사이의 수 6개)
	for(let i =1 ; i<=6 ; i++ ){ // i는 1부터 6까지 1씩 증가 반복처리 - 6회회전
		// 1. 난수만들기
			let 실수난수 = Math.random()*45+1
		// 2. 실수 --> 정수 변환
			let 정수난수 = parseInt( 실수난수 )
				
				// *중복검사
				if( 추첨번호목록.indexOf(정수난수) >= 0 ){ // 배열내 존재한 난수이면
					i--; // ★★★★★i는 6회 반복하는데 난수저장 실패시 1회 차감
				}else{ // 배열내 존재하지 않는 난수이면
						// 3. 정수난수를 배열에 저장
						추첨번호목록.push(정수난수)					
				}
			
		//* '추첨번호목록' 배열 선언 (깡통)
		//* 추첨하기<button>을 클릭하면 '구매추첨'함수 실행
		//* '구매추첨'함수가 실행되면 i는 1부터 6까지 1씩증가 반복처리 = 6회 회전
		//* 실수난수는 1~46번 중에 실수인 난수발생
		//* 정수난수는 발생한 실수를 정수로 바꿔줌
		//* 6개의 정수가 발생 , 이중에 추첨번호목록에 존재하는지 확인
		//* 추첨번호목록에 있으면 i횟수 차감, 차감한 만큼 for문 추가회전
		//* 추첨번호목록에 없으면, 중복이 아니면, 추첨번호 목록에 발생한 정수를 추가 -> 총 6개 정수 배열에추가
		
		// 1~3 : 추첨번호목록.push ( parseInt(Math.random()*45+1) )
		
		//console.log( Math.random()+1 )
		//console.log( Math.random()*45 )
		//console.log( parseInt( Math.random()*45+1 )  )
	} // for e
	
	document.querySelector('.추첨번호상자').innerHTML = 추첨번호목록
	//추첨결과 출력 [ 맞은개수와 등수 출력 6개-1등, 5개-2등, 4개-3등,3개-4등, 그외 꽝 ]
	//**추첨번호상자div에 추첨번호목록 배열의 내용이 추가된다.
	
	let 맞은개수 = 0;
	//1. 첫번째 방법
	for( let i = 0 ; i<추첨번호목록.length ; i++ ){ // i는 0부터 배열의길이 미만까지 1씩증가
		
		for( let j = 0; j<선택번호목록.length ; j++ ){ // i*j 36회전
			console.log( )
			if( 추첨번호목록[i] == 선택번호목록[j]){	맞은개수++ }
		}
	//* 맞은개수를 선언 , 값은 0
	//* i는 0부터 추첨번호목록의 길이(개수)전까지 1씩증가, 즉 6번 for문 회전
	//* i가 6번 회전할때 j는 0부터 선택번호목록 길이(개수)까지 1씩증가, j6번증가 , 즉 i*j =36번
	//* 추첨번호목록 인덱스 0~5에 해당하는 데이터 == 선택번호목록 인덱스 0~5에 해당하는 데이터 끼리 36번 대조해서
	//* 데이터가 동일할 경우 맞은개수의 수를 증가시킴. 	
	
	}
	//2
	맞은개수 = 0;
	for( let i = 0 ; i<추첨번호목록.length ; i++ ){
		if (선택번호목록.indexOf(추첨번호목록[i] >= 0 ) ){맞은개수++}
	}
	
	
	
	//3 for (반복변수 of 배열) : 배열내 요소 하나씩 마지막 요소까지 반복변수에 대입
	맞은개수 = 0;
	for( let value of 추첨번호목록 ){
		console.log (value)
		if( 선택번호목록.includes(value) == true ){맞은개수++}
	}
	alert ( 맞은개수 )
	//** 선택한번호와 추첨번호가 동일한 개수를 alert로 출력
} // f e

/*

	난수만들기
		1. Math 클래스 [ 미리 만들어둔 설계도 ]
			1. random( ) 함수 [ math클래스가 제공하는 미리 만들어둔 함수 ]
			예시)
				Math.random()	: 0 ~ 1 사이의 실수 난수 발생
				Math.random()+1 : 1 ~ 2 사이의 실수 난수 발생
				Math.random()*45 : 0 ~ 45 사이의 실수 난수 발생
				Math.random()*45+1 : 1 ~ 46 사이의 실수 난수 발생
			2. floor( ) : 소수점 버림 함수
				Math.floor ( 3.14 ) : 3
				
		2. parseInt( ) : 정수로 변환 함수 , 소수점 잘림
				parseInt(3.14) : 3
	두 배열비교
		1. 
			배열1 : 3 7 2 5
			배열2 : 1 5 3 4
				3 -> 1	7 -> 1	2 -> 1
				3 -> 5	7 -> 5	2 -> 5
				3 -> 3	7 -> 3	2 -> 3
				3 -> 4	7 -> 4	2 -> 4
				
				
				
				
				
				
				
				
*/

		//1.문자열처리 '문자열~~~~~~~~~~~~~~~~'+변수+'html 문자열'+변수+'문자열'
		//'<button onclick="버튼클릭('+i+')" >'+ i+ ' </button>'
		
		// 2. 백틱이용한 문자열처리
			//1. `(백틱 - esc 아래) : 작은따옴표 아님
			// 1. 전체를 백틱으로 감싼다.
			// 2. 변수/수식 은 ${변수/수식} 감싼다.